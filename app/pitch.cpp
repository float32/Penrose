/*
 *  Copyright 2019 Tyler Coy
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.

 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.

 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "app/pitch.h"

namespace penrose {
namespace pitch {

const int16_t PitchLookup[] PROGMEM =
{
    /* [[[cog
    vref = 5
    cv_in_gain = 49.9 / 100

    # We map VREF to 1024, not 1023, because according to section 24.7 of the
    # ATmega168 datasheet (DS40002074A),
    #   0x000 represents analog ground, and 0x3FF represents the selected
    #   reference voltage minus one LSB.

    volts_per_lsb = vref / cv_in_gain / 1024

    def entry(adc_value):
        volts = adc_value * volts_per_lsb
        semitones = volts * 12
        return round(semitones * 0x100)

    table = [entry(x) for x in range(1024)]
    per_line = 8

    for i in range(0, 1024, per_line):
        line = '0x{:>04X}, ' * per_line
        cog.outl(line.format(*table[i:i+per_line]).strip())
    ]]] */
    0x0000, 0x001E, 0x003C, 0x005A, 0x0078, 0x0096, 0x00B4, 0x00D2,
    0x00F0, 0x010F, 0x012D, 0x014B, 0x0169, 0x0187, 0x01A5, 0x01C3,
    0x01E1, 0x01FF, 0x021D, 0x023B, 0x0259, 0x0277, 0x0295, 0x02B3,
    0x02D1, 0x02F0, 0x030E, 0x032C, 0x034A, 0x0368, 0x0386, 0x03A4,
    0x03C2, 0x03E0, 0x03FE, 0x041C, 0x043A, 0x0458, 0x0476, 0x0494,
    0x04B2, 0x04D0, 0x04EF, 0x050D, 0x052B, 0x0549, 0x0567, 0x0585,
    0x05A3, 0x05C1, 0x05DF, 0x05FD, 0x061B, 0x0639, 0x0657, 0x0675,
    0x0693, 0x06B1, 0x06CF, 0x06EE, 0x070C, 0x072A, 0x0748, 0x0766,
    0x0784, 0x07A2, 0x07C0, 0x07DE, 0x07FC, 0x081A, 0x0838, 0x0856,
    0x0874, 0x0892, 0x08B0, 0x08CF, 0x08ED, 0x090B, 0x0929, 0x0947,
    0x0965, 0x0983, 0x09A1, 0x09BF, 0x09DD, 0x09FB, 0x0A19, 0x0A37,
    0x0A55, 0x0A73, 0x0A91, 0x0AAF, 0x0ACE, 0x0AEC, 0x0B0A, 0x0B28,
    0x0B46, 0x0B64, 0x0B82, 0x0BA0, 0x0BBE, 0x0BDC, 0x0BFA, 0x0C18,
    0x0C36, 0x0C54, 0x0C72, 0x0C90, 0x0CAE, 0x0CCD, 0x0CEB, 0x0D09,
    0x0D27, 0x0D45, 0x0D63, 0x0D81, 0x0D9F, 0x0DBD, 0x0DDB, 0x0DF9,
    0x0E17, 0x0E35, 0x0E53, 0x0E71, 0x0E8F, 0x0EAE, 0x0ECC, 0x0EEA,
    0x0F08, 0x0F26, 0x0F44, 0x0F62, 0x0F80, 0x0F9E, 0x0FBC, 0x0FDA,
    0x0FF8, 0x1016, 0x1034, 0x1052, 0x1070, 0x108E, 0x10AD, 0x10CB,
    0x10E9, 0x1107, 0x1125, 0x1143, 0x1161, 0x117F, 0x119D, 0x11BB,
    0x11D9, 0x11F7, 0x1215, 0x1233, 0x1251, 0x126F, 0x128D, 0x12AC,
    0x12CA, 0x12E8, 0x1306, 0x1324, 0x1342, 0x1360, 0x137E, 0x139C,
    0x13BA, 0x13D8, 0x13F6, 0x1414, 0x1432, 0x1450, 0x146E, 0x148D,
    0x14AB, 0x14C9, 0x14E7, 0x1505, 0x1523, 0x1541, 0x155F, 0x157D,
    0x159B, 0x15B9, 0x15D7, 0x15F5, 0x1613, 0x1631, 0x164F, 0x166D,
    0x168C, 0x16AA, 0x16C8, 0x16E6, 0x1704, 0x1722, 0x1740, 0x175E,
    0x177C, 0x179A, 0x17B8, 0x17D6, 0x17F4, 0x1812, 0x1830, 0x184E,
    0x186D, 0x188B, 0x18A9, 0x18C7, 0x18E5, 0x1903, 0x1921, 0x193F,
    0x195D, 0x197B, 0x1999, 0x19B7, 0x19D5, 0x19F3, 0x1A11, 0x1A2F,
    0x1A4D, 0x1A6C, 0x1A8A, 0x1AA8, 0x1AC6, 0x1AE4, 0x1B02, 0x1B20,
    0x1B3E, 0x1B5C, 0x1B7A, 0x1B98, 0x1BB6, 0x1BD4, 0x1BF2, 0x1C10,
    0x1C2E, 0x1C4C, 0x1C6B, 0x1C89, 0x1CA7, 0x1CC5, 0x1CE3, 0x1D01,
    0x1D1F, 0x1D3D, 0x1D5B, 0x1D79, 0x1D97, 0x1DB5, 0x1DD3, 0x1DF1,
    0x1E0F, 0x1E2D, 0x1E4C, 0x1E6A, 0x1E88, 0x1EA6, 0x1EC4, 0x1EE2,
    0x1F00, 0x1F1E, 0x1F3C, 0x1F5A, 0x1F78, 0x1F96, 0x1FB4, 0x1FD2,
    0x1FF0, 0x200E, 0x202C, 0x204B, 0x2069, 0x2087, 0x20A5, 0x20C3,
    0x20E1, 0x20FF, 0x211D, 0x213B, 0x2159, 0x2177, 0x2195, 0x21B3,
    0x21D1, 0x21EF, 0x220D, 0x222B, 0x224A, 0x2268, 0x2286, 0x22A4,
    0x22C2, 0x22E0, 0x22FE, 0x231C, 0x233A, 0x2358, 0x2376, 0x2394,
    0x23B2, 0x23D0, 0x23EE, 0x240C, 0x242B, 0x2449, 0x2467, 0x2485,
    0x24A3, 0x24C1, 0x24DF, 0x24FD, 0x251B, 0x2539, 0x2557, 0x2575,
    0x2593, 0x25B1, 0x25CF, 0x25ED, 0x260B, 0x262A, 0x2648, 0x2666,
    0x2684, 0x26A2, 0x26C0, 0x26DE, 0x26FC, 0x271A, 0x2738, 0x2756,
    0x2774, 0x2792, 0x27B0, 0x27CE, 0x27EC, 0x280B, 0x2829, 0x2847,
    0x2865, 0x2883, 0x28A1, 0x28BF, 0x28DD, 0x28FB, 0x2919, 0x2937,
    0x2955, 0x2973, 0x2991, 0x29AF, 0x29CD, 0x29EB, 0x2A0A, 0x2A28,
    0x2A46, 0x2A64, 0x2A82, 0x2AA0, 0x2ABE, 0x2ADC, 0x2AFA, 0x2B18,
    0x2B36, 0x2B54, 0x2B72, 0x2B90, 0x2BAE, 0x2BCC, 0x2BEA, 0x2C09,
    0x2C27, 0x2C45, 0x2C63, 0x2C81, 0x2C9F, 0x2CBD, 0x2CDB, 0x2CF9,
    0x2D17, 0x2D35, 0x2D53, 0x2D71, 0x2D8F, 0x2DAD, 0x2DCB, 0x2DEA,
    0x2E08, 0x2E26, 0x2E44, 0x2E62, 0x2E80, 0x2E9E, 0x2EBC, 0x2EDA,
    0x2EF8, 0x2F16, 0x2F34, 0x2F52, 0x2F70, 0x2F8E, 0x2FAC, 0x2FCA,
    0x2FE9, 0x3007, 0x3025, 0x3043, 0x3061, 0x307F, 0x309D, 0x30BB,
    0x30D9, 0x30F7, 0x3115, 0x3133, 0x3151, 0x316F, 0x318D, 0x31AB,
    0x31C9, 0x31E8, 0x3206, 0x3224, 0x3242, 0x3260, 0x327E, 0x329C,
    0x32BA, 0x32D8, 0x32F6, 0x3314, 0x3332, 0x3350, 0x336E, 0x338C,
    0x33AA, 0x33C9, 0x33E7, 0x3405, 0x3423, 0x3441, 0x345F, 0x347D,
    0x349B, 0x34B9, 0x34D7, 0x34F5, 0x3513, 0x3531, 0x354F, 0x356D,
    0x358B, 0x35A9, 0x35C8, 0x35E6, 0x3604, 0x3622, 0x3640, 0x365E,
    0x367C, 0x369A, 0x36B8, 0x36D6, 0x36F4, 0x3712, 0x3730, 0x374E,
    0x376C, 0x378A, 0x37A8, 0x37C7, 0x37E5, 0x3803, 0x3821, 0x383F,
    0x385D, 0x387B, 0x3899, 0x38B7, 0x38D5, 0x38F3, 0x3911, 0x392F,
    0x394D, 0x396B, 0x3989, 0x39A8, 0x39C6, 0x39E4, 0x3A02, 0x3A20,
    0x3A3E, 0x3A5C, 0x3A7A, 0x3A98, 0x3AB6, 0x3AD4, 0x3AF2, 0x3B10,
    0x3B2E, 0x3B4C, 0x3B6A, 0x3B88, 0x3BA7, 0x3BC5, 0x3BE3, 0x3C01,
    0x3C1F, 0x3C3D, 0x3C5B, 0x3C79, 0x3C97, 0x3CB5, 0x3CD3, 0x3CF1,
    0x3D0F, 0x3D2D, 0x3D4B, 0x3D69, 0x3D88, 0x3DA6, 0x3DC4, 0x3DE2,
    0x3E00, 0x3E1E, 0x3E3C, 0x3E5A, 0x3E78, 0x3E96, 0x3EB4, 0x3ED2,
    0x3EF0, 0x3F0E, 0x3F2C, 0x3F4A, 0x3F68, 0x3F87, 0x3FA5, 0x3FC3,
    0x3FE1, 0x3FFF, 0x401D, 0x403B, 0x4059, 0x4077, 0x4095, 0x40B3,
    0x40D1, 0x40EF, 0x410D, 0x412B, 0x4149, 0x4167, 0x4186, 0x41A4,
    0x41C2, 0x41E0, 0x41FE, 0x421C, 0x423A, 0x4258, 0x4276, 0x4294,
    0x42B2, 0x42D0, 0x42EE, 0x430C, 0x432A, 0x4348, 0x4367, 0x4385,
    0x43A3, 0x43C1, 0x43DF, 0x43FD, 0x441B, 0x4439, 0x4457, 0x4475,
    0x4493, 0x44B1, 0x44CF, 0x44ED, 0x450B, 0x4529, 0x4547, 0x4566,
    0x4584, 0x45A2, 0x45C0, 0x45DE, 0x45FC, 0x461A, 0x4638, 0x4656,
    0x4674, 0x4692, 0x46B0, 0x46CE, 0x46EC, 0x470A, 0x4728, 0x4746,
    0x4765, 0x4783, 0x47A1, 0x47BF, 0x47DD, 0x47FB, 0x4819, 0x4837,
    0x4855, 0x4873, 0x4891, 0x48AF, 0x48CD, 0x48EB, 0x4909, 0x4927,
    0x4946, 0x4964, 0x4982, 0x49A0, 0x49BE, 0x49DC, 0x49FA, 0x4A18,
    0x4A36, 0x4A54, 0x4A72, 0x4A90, 0x4AAE, 0x4ACC, 0x4AEA, 0x4B08,
    0x4B26, 0x4B45, 0x4B63, 0x4B81, 0x4B9F, 0x4BBD, 0x4BDB, 0x4BF9,
    0x4C17, 0x4C35, 0x4C53, 0x4C71, 0x4C8F, 0x4CAD, 0x4CCB, 0x4CE9,
    0x4D07, 0x4D25, 0x4D44, 0x4D62, 0x4D80, 0x4D9E, 0x4DBC, 0x4DDA,
    0x4DF8, 0x4E16, 0x4E34, 0x4E52, 0x4E70, 0x4E8E, 0x4EAC, 0x4ECA,
    0x4EE8, 0x4F06, 0x4F25, 0x4F43, 0x4F61, 0x4F7F, 0x4F9D, 0x4FBB,
    0x4FD9, 0x4FF7, 0x5015, 0x5033, 0x5051, 0x506F, 0x508D, 0x50AB,
    0x50C9, 0x50E7, 0x5105, 0x5124, 0x5142, 0x5160, 0x517E, 0x519C,
    0x51BA, 0x51D8, 0x51F6, 0x5214, 0x5232, 0x5250, 0x526E, 0x528C,
    0x52AA, 0x52C8, 0x52E6, 0x5305, 0x5323, 0x5341, 0x535F, 0x537D,
    0x539B, 0x53B9, 0x53D7, 0x53F5, 0x5413, 0x5431, 0x544F, 0x546D,
    0x548B, 0x54A9, 0x54C7, 0x54E5, 0x5504, 0x5522, 0x5540, 0x555E,
    0x557C, 0x559A, 0x55B8, 0x55D6, 0x55F4, 0x5612, 0x5630, 0x564E,
    0x566C, 0x568A, 0x56A8, 0x56C6, 0x56E4, 0x5703, 0x5721, 0x573F,
    0x575D, 0x577B, 0x5799, 0x57B7, 0x57D5, 0x57F3, 0x5811, 0x582F,
    0x584D, 0x586B, 0x5889, 0x58A7, 0x58C5, 0x58E4, 0x5902, 0x5920,
    0x593E, 0x595C, 0x597A, 0x5998, 0x59B6, 0x59D4, 0x59F2, 0x5A10,
    0x5A2E, 0x5A4C, 0x5A6A, 0x5A88, 0x5AA6, 0x5AC4, 0x5AE3, 0x5B01,
    0x5B1F, 0x5B3D, 0x5B5B, 0x5B79, 0x5B97, 0x5BB5, 0x5BD3, 0x5BF1,
    0x5C0F, 0x5C2D, 0x5C4B, 0x5C69, 0x5C87, 0x5CA5, 0x5CC3, 0x5CE2,
    0x5D00, 0x5D1E, 0x5D3C, 0x5D5A, 0x5D78, 0x5D96, 0x5DB4, 0x5DD2,
    0x5DF0, 0x5E0E, 0x5E2C, 0x5E4A, 0x5E68, 0x5E86, 0x5EA4, 0x5EC3,
    0x5EE1, 0x5EFF, 0x5F1D, 0x5F3B, 0x5F59, 0x5F77, 0x5F95, 0x5FB3,
    0x5FD1, 0x5FEF, 0x600D, 0x602B, 0x6049, 0x6067, 0x6085, 0x60A3,
    0x60C2, 0x60E0, 0x60FE, 0x611C, 0x613A, 0x6158, 0x6176, 0x6194,
    0x61B2, 0x61D0, 0x61EE, 0x620C, 0x622A, 0x6248, 0x6266, 0x6284,
    0x62A3, 0x62C1, 0x62DF, 0x62FD, 0x631B, 0x6339, 0x6357, 0x6375,
    0x6393, 0x63B1, 0x63CF, 0x63ED, 0x640B, 0x6429, 0x6447, 0x6465,
    0x6483, 0x64A2, 0x64C0, 0x64DE, 0x64FC, 0x651A, 0x6538, 0x6556,
    0x6574, 0x6592, 0x65B0, 0x65CE, 0x65EC, 0x660A, 0x6628, 0x6646,
    0x6664, 0x6682, 0x66A1, 0x66BF, 0x66DD, 0x66FB, 0x6719, 0x6737,
    0x6755, 0x6773, 0x6791, 0x67AF, 0x67CD, 0x67EB, 0x6809, 0x6827,
    0x6845, 0x6863, 0x6882, 0x68A0, 0x68BE, 0x68DC, 0x68FA, 0x6918,
    0x6936, 0x6954, 0x6972, 0x6990, 0x69AE, 0x69CC, 0x69EA, 0x6A08,
    0x6A26, 0x6A44, 0x6A62, 0x6A81, 0x6A9F, 0x6ABD, 0x6ADB, 0x6AF9,
    0x6B17, 0x6B35, 0x6B53, 0x6B71, 0x6B8F, 0x6BAD, 0x6BCB, 0x6BE9,
    0x6C07, 0x6C25, 0x6C43, 0x6C61, 0x6C80, 0x6C9E, 0x6CBC, 0x6CDA,
    0x6CF8, 0x6D16, 0x6D34, 0x6D52, 0x6D70, 0x6D8E, 0x6DAC, 0x6DCA,
    0x6DE8, 0x6E06, 0x6E24, 0x6E42, 0x6E61, 0x6E7F, 0x6E9D, 0x6EBB,
    0x6ED9, 0x6EF7, 0x6F15, 0x6F33, 0x6F51, 0x6F6F, 0x6F8D, 0x6FAB,
    0x6FC9, 0x6FE7, 0x7005, 0x7023, 0x7041, 0x7060, 0x707E, 0x709C,
    0x70BA, 0x70D8, 0x70F6, 0x7114, 0x7132, 0x7150, 0x716E, 0x718C,
    0x71AA, 0x71C8, 0x71E6, 0x7204, 0x7222, 0x7240, 0x725F, 0x727D,
    0x729B, 0x72B9, 0x72D7, 0x72F5, 0x7313, 0x7331, 0x734F, 0x736D,
    0x738B, 0x73A9, 0x73C7, 0x73E5, 0x7403, 0x7421, 0x7440, 0x745E,
    0x747C, 0x749A, 0x74B8, 0x74D6, 0x74F4, 0x7512, 0x7530, 0x754E,
    0x756C, 0x758A, 0x75A8, 0x75C6, 0x75E4, 0x7602, 0x7620, 0x763F,
    0x765D, 0x767B, 0x7699, 0x76B7, 0x76D5, 0x76F3, 0x7711, 0x772F,
    0x774D, 0x776B, 0x7789, 0x77A7, 0x77C5, 0x77E3, 0x7801, 0x7820,
    // [[[end]]]
};

const int8_t OctaveLookup[] PROGMEM =
{
    /* [[[cog
    max_semitone = entry(1023) >> 8
    octaves = max_semitone // 12 + 1

    for i in range(octaves):
        cog.outl(('{0:2d}, ' * 12).format(i).strip())
    ]]]*/
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
    4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
    6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,
    8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    // [[[end]]]
};

const int8_t NoteLookup[] PROGMEM =
{
    /* [[[cog
    max_semitone = entry(1023) >> 8
    octaves = max_semitone // 12 + 1

    for i in range(octaves):
        cog.outl('0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,')
    ]]]*/
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
    // [[[end]]]
};

}
}
